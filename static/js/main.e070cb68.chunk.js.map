{"version":3,"sources":["lib/nft-utils.ts","App.tsx","index.tsx","config.ts"],"names":["TOKEN_METADATA_PROGRAM_ID","anchor","PublicKey","getNftsForOwner","ownerAddress","a","allTokens","CONNECTION","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","tokenAccounts","index","value","length","tokenAccount","tokenAmount","account","data","parsed","info","amount","decimals","owner","CYBERGOTHICA_WALLET","findProgramAddress","Buffer","from","toBuffer","mint","pda","getParsedAccountInfo","accountInfo","metadata","Metadata","toString","axios","get","uri","collection","family","push","Address","Name","name","ImageUrl","image","Image","console","log","sort","b","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","webglContextAttributes","preserveDrawingBuffer","App","userWallet","useState","displayWallets","setdisplayWallets","useEffect","on","progression","loadingPanel","document","getElementById","progressBarFull","style","display","width","removeEventListener","connectWalletToBuild","wallet","undefined","adapter","connect","publicKey","send","nftsData","i","nftJsonData","JSON","stringify","id","className","onClick","getPhantomWallet","getSlopeWallet","devicePixelRatio","src","ReactDOM","render","Connection","process","TREASURY"],"mappings":"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","file":"static/js/main.e070cb68.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\nimport { CONNECTION, TREASURY as CYBERGOTHICA_WALLET } from \"../config\";\r\nimport { Metadata } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport axios from \"axios\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n\t'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n\t'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\nexport const getUserTokenAccounts = async (pubkey: anchor.web3.PublicKey) => {\r\n    \r\n    console.log(\r\n        await CONNECTION.getTokenAccountsByOwner(pubkey, { programId: TOKEN_PROGRAM_ID })\r\n    );\r\n}\r\n\r\nexport const GetInfoFromUrl = (yourUrl: string) => {\r\n    var Httpreq = new XMLHttpRequest();\r\n    Httpreq.open(\"GET\", yourUrl, false);\r\n    Httpreq.send(null);\r\n    return Httpreq.responseText;          \r\n}\r\n\r\nexport const sleep = (ms: number): Promise<void> => {\r\n\treturn new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nexport async function getNftsForOwner(ownerAddress: anchor.web3.PublicKey) {\r\n\tconst allTokens: any = []\r\n\tconst tokenAccounts = await CONNECTION.getParsedTokenAccountsByOwner(ownerAddress, {\r\n\t  programId: TOKEN_PROGRAM_ID\r\n\t});\r\n\r\n\tfor (let index = 0; index < tokenAccounts.value.length; index++) {\r\n\t  const tokenAccount = tokenAccounts.value[index];\r\n\t  const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\r\n      \r\n\t  if (tokenAmount.amount == \"1\" && tokenAmount.decimals == \"0\" && tokenAccount.account.data.parsed.info.owner == CYBERGOTHICA_WALLET) {\r\n\t\ttry {\r\n            let [pda] = await anchor.web3.PublicKey.findProgramAddress([\r\n                Buffer.from(\"metadata\"),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                (new anchor.web3.PublicKey(tokenAccount.account.data.parsed.info.mint)).toBuffer(),\r\n              ], TOKEN_METADATA_PROGRAM_ID);\r\n              const accountInfo: any = await CONNECTION.getParsedAccountInfo(pda);\r\n        \r\n              const metadata: any = new Metadata(ownerAddress.toString(), accountInfo.value);\r\n              const { data }: any = await axios.get(metadata.data.data.uri)\r\n      \r\n              if(data.collection.family != \"CyberGothica\") continue;\r\n      \r\n              //const entireData = { ...data, id: Number(data.name.replace( /^\\D+/g, '').split(' - ')[0]) }\r\n        \r\n              //allTokens.push({ ...entireData })\r\n\r\n\t\t\t  allTokens.push({ Address: tokenAccount.account.data.parsed.info.mint, Name: data.name, ImageUrl: data.image, Image: null })\r\n        }\r\n        catch (error: any) {\r\n            console.log(error.toString());\r\n        }\r\n\t  }\r\n\t  allTokens.sort(function (a: any, b: any) {\r\n\t\tif (a.name < b.name) { return -1; }\r\n\t\tif (a.name > b.name) { return 1; }\r\n\t\treturn 0;\r\n\t  })\r\n\t}\r\n  \r\n\treturn allTokens\r\n  }\r\n\r\nexport async function getNftMetadata(nftAddress: string) {\r\n\tlet tokenmetaPubkey = await Metadata.getPDA(new anchor.web3.PublicKey(nftAddress));\r\n\tconst tokenAccountMeta = await Metadata.load(CONNECTION, tokenmetaPubkey);\r\n\r\n\tif(CYBERGOTHICA_WALLET.toString() == tokenAccountMeta.data.updateAuthority) {\r\n\t\tconst nftInfo = JSON.parse(GetInfoFromUrl(tokenAccountMeta.data.data.uri));\r\n\r\n\t\tif(nftInfo.collection.family = \"CyberGothica\")\r\n\t\t\treturn nftInfo;\r\n\t}\r\n\t\r\n\tconsole.log(\"It is not CyberGothica's nft!\");\r\n\treturn null;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {\r\n\tgetPhantomWallet,\r\n\tgetSlopeWallet,\r\n\tgetSolflareWallet,\r\n\tgetSolletWallet,\r\n\tgetSolletExtensionWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\nimport { getNftsForOwner } from \"./lib/nft-utils\";\r\n\r\nconst unityContext = new UnityContext({\r\n  loaderUrl: \"Build/cg-build.loader.js\",\r\n  dataUrl: \"Build/cg-build.data\",\r\n  frameworkUrl: \"Build/cg-build.framework.js\",\r\n  codeUrl: \"Build/cg-build.wasm\",\r\n  webglContextAttributes: {\r\n    preserveDrawingBuffer: true,\r\n  },\r\n});\r\n\r\nexport const App = () => {\r\n  \r\n  const [displayWallets, setdisplayWallets] = useState(false);\r\n  let userWallet: any;\r\n\r\n  useEffect(function () {\r\n    unityContext.on(\"ConnectWallet\", async function () {\r\n      setdisplayWallets(true);\r\n    });\r\n    \r\n    unityContext.on(\"progress\", function (progression) {\r\n      const loadingPanel = document.getElementById(\"#unity-loading-bar\");\r\n      const progressBarFull = document.getElementById(\"#unity-progress-bar-full\");\r\n      \r\n      if(loadingPanel !== null && progressBarFull !== null) {\r\n        loadingPanel.style.display = \"block\";  \r\n        progressBarFull.style.width = 100 * progression + \"%\";\r\n\r\n        if(progression >= 1) {\r\n          loadingPanel.style.display = \"none\";\r\n        }\r\n      } \r\n    });\r\n    return function () {\r\n      unityContext.removeEventListener(\"progress\");\r\n    };\r\n\r\n  }, []);\r\n\r\n  const connectWalletToBuild = async (wallet: any) => {\r\n    if(wallet == null || wallet == undefined) {\r\n      console.log(\"Wallet not found!\");\r\n      return;\r\n    }\r\n\r\n    const adapter = wallet.adapter();\r\n    await adapter.connect();\r\n    userWallet = adapter;\r\n\r\n    if(userWallet.publicKey !== null) {\r\n        unityContext.send(\"UserWallet\", \"ReceiveWalletInfo\", userWallet.publicKey.toString());\r\n        setdisplayWallets(false);\r\n\r\n        const nftsData = await getNftsForOwner(userWallet.publicKey);\r\n\r\n        for(let i = 0; i < nftsData.length; i++) {\r\n          const nftJsonData = JSON.stringify(nftsData[i]);\r\n          unityContext.send(\"UserWallet\", \"ReceiveNft\", nftJsonData);\r\n        }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { displayWallets ? \r\n        <div id=\"wallet-connector\">\r\n          <div id=\"wallet-adapters-holder\">\r\n            <div id=\"wallet-adapters-title\">SELECT WALLET</div>\r\n            <div id=\"wallet-adapters-list\">\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getPhantomWallet())}>\r\n                  Phantom\r\n              </button>\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getSlopeWallet())}>\r\n                  Slope\r\n              </button>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      : null }\r\n      <Unity devicePixelRatio={1} unityContext={unityContext} className=\"unity-canvas\" /> \r\n      <div id=\"unity-loading-bar\">\r\n        <img id=\"game-logo\" src=\"logo.png\" />\r\n        <div id=\"unity-progress-bar-empty\">\r\n          <div id=\"unity-progress-bar-full\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import { StrictMode } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <StrictMode>\r\n        <App />\r\n    </StrictMode>,\r\n    document.getElementById('unity-container'),\r\n);\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nexport const NETWORK = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nexport const CONNECTION = new anchor.web3.Connection(process.env.REACT_APP_SOLANA_RPC_HOST!);\r\nexport const TREASURY = new anchor.web3.PublicKey(process.env.REACT_APP_TREASURY_ADDRESS!);"],"sourceRoot":""}