{"version":3,"sources":["lib/nft-utils.ts","lib/utils.ts","App.tsx","index.tsx","config.ts"],"names":["TOKEN_METADATA_PROGRAM_ID","anchor","PublicKey","getNftsForOwner","ownerAddress","a","allTokens","CONNECTION","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","tokenAccounts","index","value","length","tokenAccount","tokenAmount","account","data","parsed","info","console","log","amount","decimals","findProgramAddress","Buffer","from","toBuffer","mint","pda","getParsedAccountInfo","accountInfo","metadata","Metadata","toString","axios","get","uri","collection","family","push","Address","Name","name","ImageUrl","image","Image","sort","b","SPIRIT_TOKEN_ADDRESS","getSpiritBalance","wallet","response","undefined","uiAmount","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","webglContextAttributes","preserveDrawingBuffer","App","userWallet","useState","displayWallets","setdisplayWallets","useEffect","on","progression","loadingPanel","document","getElementById","progressBarFull","style","display","width","nftAddress","nftName","xhr","XMLHttpRequest","open","url","setRequestHeader","onreadystatechange","readyState","status","responseText","send","removeEventListener","connectWalletToBuild","adapter","connect","publicKey","spiritTokenAmount","nftsData","i","nftJsonData","JSON","stringify","id","className","onClick","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","devicePixelRatio","src","ReactDOM","render","Connection","process"],"mappings":"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","file":"static/js/main.b801eba4.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\nimport { CONNECTION, TREASURY as CYBERGOTHICA_WALLET } from \"../config\";\r\nimport { Metadata } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport axios from \"axios\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n\t'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n\t'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\nexport const getUserTokenAccounts = async (pubkey: anchor.web3.PublicKey) => {\r\n    \r\n    console.log(\r\n        await CONNECTION.getTokenAccountsByOwner(pubkey, { programId: TOKEN_PROGRAM_ID })\r\n    );\r\n}\r\n\r\nexport const GetInfoFromUrl = (yourUrl: string) => {\r\n    var Httpreq = new XMLHttpRequest();\r\n    Httpreq.open(\"GET\", yourUrl, false);\r\n    Httpreq.send(null);\r\n    return Httpreq.responseText;          \r\n}\r\n\r\nexport const sleep = (ms: number): Promise<void> => {\r\n\treturn new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nexport async function getNftsForOwner(ownerAddress: anchor.web3.PublicKey) {\r\n\tconst allTokens: any = []\r\n\tconst tokenAccounts = await CONNECTION.getParsedTokenAccountsByOwner(ownerAddress, {\r\n\t  programId: TOKEN_PROGRAM_ID\r\n\t});\r\n\r\n\tfor (let index = 0; index < tokenAccounts.value.length; index++) {\r\n\t  const tokenAccount = tokenAccounts.value[index];\r\n\t  const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\r\n\r\n    console.log(tokenAccount.account.data.parsed.info);\r\n      \r\n\t  if (tokenAmount.amount == \"1\" && tokenAmount.decimals == \"0\") {\r\n\t\ttry {\r\n            let [pda] = await anchor.web3.PublicKey.findProgramAddress([\r\n                Buffer.from(\"metadata\"),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                (new anchor.web3.PublicKey(tokenAccount.account.data.parsed.info.mint)).toBuffer(),\r\n              ], TOKEN_METADATA_PROGRAM_ID);\r\n              const accountInfo: any = await CONNECTION.getParsedAccountInfo(pda);\r\n        \r\n              const metadata: any = new Metadata(ownerAddress.toString(), accountInfo.value);\r\n              const { data }: any = await axios.get(metadata.data.data.uri)\r\n      \r\n              if(data.collection.family != \"CyberGothica\") continue;\r\n\r\n\t\t\t  allTokens.push({ Address: tokenAccount.account.data.parsed.info.mint, Name: data.name, ImageUrl: data.image, Image: null })\r\n        }\r\n        catch (error: any) {\r\n            console.log(error.toString());\r\n        }\r\n\t  }\r\n\t  allTokens.sort(function (a: any, b: any) {\r\n\t\tif (a.name < b.name) { return -1; }\r\n\t\tif (a.name > b.name) { return 1; }\r\n\t\treturn 0;\r\n\t  })\r\n\t}\r\n  \r\n\treturn allTokens\r\n  }\r\n","import { CONNECTION } from \"../config\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nconst SPIRIT_TOKEN_ADDRESS = new PublicKey(\"9bPoFPCwGCVGDMC5gvzisPdjgKC6tRLRDhirJvcktgVh\");\r\n\r\nexport const getSpiritBalance = async (wallet: PublicKey) => {\r\n    const response: any = await CONNECTION.getParsedTokenAccountsByOwner(wallet, \r\n        {mint: SPIRIT_TOKEN_ADDRESS}    \r\n    );\r\n\r\n    console.log(response);\r\n\r\n    if(!response || response === undefined) return 0;\r\n    if(!response.value || response.value === undefined || response.value.length === 0) return 0;\r\n    if(!response.value[0] || response.value[0] === undefined) return 0;\r\n    if(!response.value[0].account || response.value[0].account === undefined) return 0;\r\n\r\n    return response.value[0].account.data.parsed.info.tokenAmount.uiAmount;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {\r\n\tgetPhantomWallet,\r\n\tgetSlopeWallet,\r\n\tgetSolflareWallet,\r\n\tgetSolletWallet,\r\n\tgetSolletExtensionWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\nimport { getNftsForOwner } from \"./lib/nft-utils\";\r\nimport { getSpiritBalance } from \"./lib/utils\";\r\n\r\nconst unityContext = new UnityContext({\r\n  loaderUrl: \"Build/cg-build.loader.js\",\r\n  dataUrl: \"Build/cg-build.data\",\r\n  frameworkUrl: \"Build/cg-build.framework.js\",\r\n  codeUrl: \"Build/cg-build.wasm\",\r\n  webglContextAttributes: {\r\n    preserveDrawingBuffer: true,\r\n  },\r\n});\r\n\r\nexport const App = () => {\r\n  \r\n  const [displayWallets, setdisplayWallets] = useState(false);\r\n  let userWallet: any;\r\n\r\n  useEffect(function () {\r\n    unityContext.on(\"ConnectWallet\", async function () {\r\n      setdisplayWallets(true);\r\n    });\r\n    \r\n    unityContext.on(\"progress\", function (progression) {\r\n      const loadingPanel = document.getElementById(\"#unity-loading-bar\");\r\n      const progressBarFull = document.getElementById(\"#unity-progress-bar-full\");\r\n      \r\n      if(loadingPanel !== null && progressBarFull !== null) {\r\n        loadingPanel.style.display = \"block\";  \r\n        progressBarFull.style.width = 100 * progression + \"%\";\r\n\r\n        if(progression >= 1) {\r\n          loadingPanel.style.display = \"none\";\r\n        }\r\n      } \r\n    });\r\n\r\n    unityContext.on(\"RegisterNewNft\", function (nftAddress, nftName) {\r\n        console.log(nftAddress);\r\n        console.log(nftName);\r\n        var url = process.env.REACT_APP_LEADERBOARD_DB_URI;\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", url + \"/register\");\r\n\r\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n        xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 4) {\r\n            console.log(xhr.status);\r\n            console.log(xhr.responseText);\r\n        }};\r\n\r\n        var data = `{\"token_address\": \"${nftAddress}\", \"character_name\": \"${nftName}\"}`;\r\n\r\n        xhr.send(data);\r\n    });\r\n\r\n    return function () {\r\n      unityContext.removeEventListener(\"progress\");\r\n    };\r\n\r\n  }, []);\r\n\r\n  const connectWalletToBuild = async (wallet: any) => {\r\n    if(wallet == null || wallet == undefined) {\r\n      console.log(\"Wallet not found!\");\r\n      return;\r\n    }\r\n\r\n    const adapter = wallet.adapter();\r\n    await adapter.connect();\r\n    userWallet = adapter;\r\n\r\n    if(userWallet.publicKey !== null) {\r\n        unityContext.send(\"UserWallet\", \"ReceiveWalletInfo\", userWallet.publicKey.toString());\r\n        const spiritTokenAmount = await getSpiritBalance(userWallet.publicKey); \r\n        \r\n        unityContext.send(\"UserWallet\", \"SetSpiritAmount\", spiritTokenAmount);\r\n        setdisplayWallets(false);\r\n\r\n        const nftsData = await getNftsForOwner(userWallet.publicKey);\r\n\r\n        for(let i = 0; i < nftsData.length; i++) {\r\n          const nftJsonData = JSON.stringify(nftsData[i]);\r\n          unityContext.send(\"UserWallet\", \"ReceiveNft\", nftJsonData);\r\n        }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { displayWallets ? \r\n        <div id=\"wallet-connector\">\r\n          <div id=\"wallet-adapters-holder\">\r\n            <div id=\"wallet-adapters-title\">SELECT WALLET</div>\r\n            <div id=\"wallet-adapters-list\">\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getPhantomWallet())}>\r\n                  Phantom\r\n              </button>\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getSlopeWallet())}>\r\n                  Slope\r\n              </button>\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getSolflareWallet())}>\r\n                  Solflare\r\n              </button>\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getSolletWallet())}>\r\n                  Sollet\r\n              </button>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      : null }\r\n      <Unity devicePixelRatio={1} unityContext={unityContext} className=\"unity-canvas\" />\r\n      <div id=\"unity-loading-bar\">\r\n        <img id=\"game-logo\" src=\"logo.png\" />\r\n        <div id=\"unity-progress-bar-empty\">\r\n          <div id=\"unity-progress-bar-full\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import { StrictMode } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <StrictMode>\r\n        <App />\r\n    </StrictMode>,\r\n    document.getElementById('unity-container'),\r\n);\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nexport const NETWORK = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nexport const CONNECTION = new anchor.web3.Connection(process.env.REACT_APP_SOLANA_RPC_HOST!);\r\nexport const TREASURY = new anchor.web3.PublicKey(process.env.REACT_APP_TREASURY_ADDRESS!);"],"sourceRoot":""}