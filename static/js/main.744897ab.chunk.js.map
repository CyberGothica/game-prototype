{"version":3,"sources":["utils.ts","lib/solana/nft-utils.ts","lib/solana/config.ts","lib/harmony/nft-utils.ts","lib/solana/utils.ts","lib/harmony/config.ts","App.tsx","index.tsx"],"names":["delay","ms","Promise","resolve","setTimeout","getNFTDataFromLink","link","a","Httpreq","XMLHttpRequest","open","send","JSON","parse","responseText","transferNftsToGame","unityContext","ownerAddress","CONNECTION","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","tokenAccounts","index","value","length","tokenAccount","tokenAmount","account","data","parsed","info","amount","decimals","anchor","PublicKey","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","mint","pda","getParsedAccountInfo","accountInfo","metadata","Metadata","toString","axios","get","uri","collection","family","nftJsonData","stringify","Address","Name","name","ImageUrl","image","Image","console","log","Connection","process","SPIRIT_TOKEN_ADDRESS","transferHarmonyNftsToGame","contract","nftAddress","methods","walletOfOwner","call","tokenIds","i","tokenURI","result","fetchedData","getTokenBalance","wallet","address","response","undefined","uiAmount","NFT_CONTRACTS_ABIS","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","webglContextAttributes","preserveDrawingBuffer","App","userWallet","useState","displayWallets","setdisplayWallets","useEffect","on","progression","loadingPanel","document","getElementById","progressBarFull","style","display","width","nftName","xhr","url","setRequestHeader","onreadystatechange","readyState","status","removeEventListener","loadWeb3","window","ethereum","web3","Web3","enable","currentProvider","alert","loadBlockchainData","eth","net","getId","networkId","getAccounts","accounts","networkData","networks","Contract","abi","connectWalletToBuildHarmony","connectWalletToBuildSolana","adapter","connect","publicKey","spiritTokenAmount","id","className","onClick","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","devicePixelRatio","src","ReactDOM","render"],"mappings":"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","file":"static/js/main.744897ab.chunk.js","sourcesContent":["export const delay = (ms: number) => {\r\n    return new Promise( resolve => setTimeout(resolve, ms) );\r\n}\r\n\r\nexport const getNFTDataFromLink = async (link: string) => {\r\n    var Httpreq = new XMLHttpRequest();\r\n    Httpreq.open(\"GET\", link, false);\r\n    Httpreq.send(null);\r\n    return JSON.parse(Httpreq.responseText);     \r\n}","import * as anchor from \"@project-serum/anchor\";\r\nimport { CONNECTION, TOKEN_METADATA_PROGRAM_ID } from \"./config\";\r\nimport { Metadata } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { TOKEN_PROGRAM_ID,  } from '@solana/spl-token';\r\nimport { UnityContext } from \"react-unity-webgl\";\r\nimport axios from \"axios\";\r\nimport { delay } from \"../../utils\";\r\n\r\nexport async function transferNftsToGame(unityContext: UnityContext, ownerAddress: anchor.web3.PublicKey) {\r\n\tconst tokenAccounts = await CONNECTION.getParsedTokenAccountsByOwner(ownerAddress, {\r\n\t  programId: TOKEN_PROGRAM_ID\r\n\t});\r\n\r\n\tfor (let index = 0; index < tokenAccounts.value.length; index++) {\r\n\t  const tokenAccount = tokenAccounts.value[index];\r\n\t  const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\r\n      \r\n\t  if (tokenAmount.amount == \"1\" && tokenAmount.decimals == \"0\") {\r\n      try {\r\n        let [pda] = await anchor.web3.PublicKey.findProgramAddress([\r\n          Buffer.from(\"metadata\"),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          (new anchor.web3.PublicKey(tokenAccount.account.data.parsed.info.mint)).toBuffer(),\r\n        ], TOKEN_METADATA_PROGRAM_ID);\r\n        const accountInfo: any = await CONNECTION.getParsedAccountInfo(pda);\r\n          \r\n        const metadata: any = new Metadata(ownerAddress.toString(), accountInfo.value);\r\n        const { data }: any = await axios.get(metadata.data.data.uri)\r\n        \r\n        if(data.collection.family != \"CyberGothica\") continue;\r\n                \r\n        const nftJsonData = JSON.stringify({ Address: tokenAccount.account.data.parsed.info.mint, Name: data.name, ImageUrl: data.image, Image: null });\r\n        unityContext.send(\"UserWallet\", \"ReceiveNft\", nftJsonData);\r\n        delay(300);\r\n      }\r\n      catch (error: any) {\r\n        console.log(error.toString());\r\n      }\r\n\t  }\r\n\t}\r\n}\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nexport const NETWORK = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nexport const CONNECTION = new anchor.web3.Connection(process.env.REACT_APP_SOLANA_RPC_HOST!);\r\nexport const TREASURY = new anchor.web3.PublicKey(process.env.REACT_APP_TREASURY_ADDRESS!);\r\nexport const SPIRIT_TOKEN_ADDRESS = new anchor.web3.PublicKey(\"9bPoFPCwGCVGDMC5gvzisPdjgKC6tRLRDhirJvcktgVh\");\r\nexport const TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');","import { UnityContext } from \"react-unity-webgl\";\r\nimport { delay, getNFTDataFromLink } from \"../../utils\";\r\n\r\nexport async function transferHarmonyNftsToGame(unityContext: UnityContext, contract: any, account: any, nftAddress: string) {\r\n    const tokenIds = await contract.methods\r\n        .walletOfOwner(account)\r\n        .call();\r\n\r\n    for(let i = 0; i < tokenIds.length; i++) { \r\n        const result = await contract.methods.tokenURI(tokenIds[i]).call();\r\n        \r\n        const fetchedData = await getNFTDataFromLink(result);\r\n        const nftJsonData = JSON.stringify({ Address: `${nftAddress}__${tokenIds[i]}`, Name: fetchedData.name, ImageUrl: fetchedData.image, Image: null });\r\n\r\n        unityContext.send(\"UserWallet\", \"ReceiveNft\", nftJsonData);\r\n        delay(300);\r\n    }\r\n}","import { CONNECTION } from \"./config\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nexport const getTokenBalance = async (wallet: PublicKey, address: PublicKey) => {\r\n    const response: any = await CONNECTION.getParsedTokenAccountsByOwner(wallet, \r\n        {mint: address}    \r\n    );\r\n\r\n    if(!response || response === undefined) return 0;\r\n    if(!response.value || response.value === undefined || response.value.length === 0) return 0;\r\n    if(!response.value[0] || response.value[0] === undefined) return 0;\r\n    if(!response.value[0].account || response.value[0].account === undefined) return 0;\r\n\r\n    return response.value[0].account.data.parsed.info.tokenAmount.uiAmount;\r\n}","import Mint1Contract from \"./abis/mint-1/MintableNFT.json\";\r\nimport Mint2Contract from \"./abis/mint-2/MintableNFT.json\";\r\n\r\nexport const NFT_CONTRACTS_ABIS = [Mint1Contract as any, Mint2Contract as any];","import { useEffect, useState } from \"react\";\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {\r\n\tgetPhantomWallet,\r\n\tgetSlopeWallet,\r\n\tgetSolflareWallet,\r\n\tgetSolletWallet\r\n} from \"@solana/wallet-adapter-wallets\";\r\nimport { transferNftsToGame } from \"./lib/solana/nft-utils\";\r\nimport { transferHarmonyNftsToGame } from \"./lib/harmony/nft-utils\";\r\nimport { getTokenBalance } from \"./lib/solana/utils\";\r\nimport { SPIRIT_TOKEN_ADDRESS } from \"./lib/solana/config\";\r\nimport { NFT_CONTRACTS_ABIS } from \"./lib/harmony/config\";\r\nimport Web3 from 'web3';\r\n\r\ndeclare var window: any\r\n\r\nconst unityContext = new UnityContext({\r\n  loaderUrl: \"Build/cg-build.loader.js\",\r\n  dataUrl: \"Build/cg-build.data\",\r\n  frameworkUrl: \"Build/cg-build.framework.js\",\r\n  codeUrl: \"Build/cg-build.wasm\",\r\n  webglContextAttributes: {\r\n    preserveDrawingBuffer: true,\r\n  },\r\n});\r\n\r\nexport const App = () => {\r\n  const [displayWallets, setdisplayWallets] = useState(false);\r\n  let userWallet: any;\r\n  \r\n  useEffect(function () {\r\n    unityContext.on(\"ConnectWallet\", async function () {\r\n      setdisplayWallets(true);\r\n    });\r\n    \r\n    unityContext.on(\"progress\", function (progression) {\r\n      const loadingPanel = document.getElementById(\"#unity-loading-bar\");\r\n      const progressBarFull = document.getElementById(\"#unity-progress-bar-full\");\r\n      \r\n      if(loadingPanel !== null && progressBarFull !== null) {\r\n        loadingPanel.style.display = \"block\";  \r\n        progressBarFull.style.width = 100 * progression + \"%\";\r\n\r\n        if(progression >= 1) {\r\n          loadingPanel.style.display = \"none\";\r\n        }\r\n      } \r\n    });\r\n\r\n    unityContext.on(\"RegisterNewNft\", function (nftAddress, nftName) {\r\n        console.log(nftAddress);\r\n        console.log(nftName);\r\n        var url = process.env.REACT_APP_LEADERBOARD_DB_URI;\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", url + \"/register\");\r\n\r\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n        xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 4) {\r\n            console.log(xhr.status);\r\n            console.log(xhr.responseText);\r\n        }};\r\n\r\n        var data = `{\"token_address\": \"${nftAddress}\", \"character_name\": \"${nftName}\"}`;\r\n\r\n        xhr.send(data);\r\n    });\r\n\r\n    return function () {\r\n      unityContext.removeEventListener(\"progress\");\r\n    };\r\n\r\n  }, []); \r\n  \r\n  const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    \r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-EVM browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n  \r\n  const loadBlockchainData = async () => {\r\n    const web3 = window.web3\r\n    const networkId = await web3.eth.net.getId()\r\n    const accounts = await web3.eth.getAccounts()\r\n\r\n    unityContext.send(\"UserWallet\", \"ReceiveWalletInfo\", accounts[0]);     \r\n    unityContext.send(\"UserWallet\", \"SetSpiritAmount\", 0);\r\n\r\n    for(let i = 0; i < NFT_CONTRACTS_ABIS.length; i++) {\r\n      const networkData = NFT_CONTRACTS_ABIS[i].networks[networkId]; \r\n\r\n      if(networkData) {\r\n        const contract = new web3.eth.Contract(NFT_CONTRACTS_ABIS[i].abi, networkData.address)  \r\n        await transferHarmonyNftsToGame(unityContext, contract, accounts[0], networkData.address);\r\n      } \r\n      else {\r\n        window.alert('Smart contract not deployed to detected network.')\r\n      }\r\n    }\r\n  }\r\n\r\n  const connectWalletToBuildHarmony = async () => {\r\n    await loadWeb3();\r\n    await loadBlockchainData();\r\n\r\n    setdisplayWallets(false);\r\n  }\r\n    \r\n  const connectWalletToBuildSolana = async (wallet: any) => {\r\n    if(wallet == null || wallet == undefined) {\r\n      console.log(\"Wallet not found!\");\r\n      return;\r\n    }\r\n\r\n    const adapter = wallet.adapter();\r\n    await adapter.connect();\r\n    userWallet = adapter;\r\n\r\n    if(userWallet.publicKey !== null) {\r\n        unityContext.send(\"UserWallet\", \"ReceiveWalletInfo\", userWallet.publicKey.toString());\r\n        const spiritTokenAmount = await getTokenBalance(userWallet.publicKey, SPIRIT_TOKEN_ADDRESS); \r\n        \r\n        unityContext.send(\"UserWallet\", \"SetSpiritAmount\", spiritTokenAmount);\r\n        setdisplayWallets(false);\r\n\r\n        transferNftsToGame(unityContext, userWallet.publicKey);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { displayWallets ? \r\n        <div id=\"wallet-connector\">\r\n          <div id=\"wallet-adapters-holder\">\r\n            <div id=\"wallet-adapters-title\">SELECT WALLET</div>\r\n              <div id=\"wallet-adapters-list\">\r\n                <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuildSolana(getPhantomWallet())}>\r\n                    Phantom\r\n                </button>\r\n                <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuildSolana(getSlopeWallet())}>\r\n                    Slope\r\n                </button>\r\n                <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuildSolana(getSolflareWallet())}>\r\n                    Solflare\r\n                </button>\r\n                <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuildSolana(getSolletWallet())}>\r\n                    Sollet\r\n                </button>\r\n                <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuildHarmony()}>\r\n                    Metamask\r\n                </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      : null }\r\n      <Unity devicePixelRatio={1} unityContext={unityContext} className=\"unity-canvas\" />\r\n      <div id=\"unity-loading-bar\">\r\n        <img id=\"game-logo\" src=\"logo.png\" />\r\n        <div id=\"unity-progress-bar-empty\">\r\n          <div id=\"unity-progress-bar-full\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <StrictMode>\r\n        <App />\r\n    </StrictMode>,\r\n    document.getElementById('unity-container'),\r\n);\r\n"],"sourceRoot":""}