{"version":3,"sources":["lib/solana/nft-utils.ts","lib/solana/config.ts","lib/solana/utils.ts","App.tsx","index.tsx"],"names":["transferNftsToGame","unityContext","ownerAddress","a","CONNECTION","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","tokenAccounts","index","value","length","tokenAccount","tokenAmount","account","data","parsed","info","console","log","amount","decimals","anchor","PublicKey","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","mint","pda","getParsedAccountInfo","accountInfo","metadata","Metadata","toString","axios","get","uri","collection","family","nftJsonData","JSON","stringify","Address","Name","name","ImageUrl","image","Image","send","Connection","process","SPIRIT_TOKEN_ADDRESS","getTokenBalance","wallet","address","response","undefined","uiAmount","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","webglContextAttributes","preserveDrawingBuffer","App","userWallet","useState","displayWallets","setdisplayWallets","useEffect","on","progression","loadingPanel","document","getElementById","progressBarFull","style","display","width","nftAddress","nftName","xhr","XMLHttpRequest","open","url","setRequestHeader","onreadystatechange","readyState","status","responseText","removeEventListener","connectWalletToBuild","adapter","connect","publicKey","spiritTokenAmount","id","className","onClick","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","devicePixelRatio","src","ReactDOM","render"],"mappings":"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","file":"static/js/main.0c51f1fb.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\nimport { CONNECTION, TOKEN_METADATA_PROGRAM_ID } from \"./config\";\r\nimport { Metadata } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { TOKEN_PROGRAM_ID,  } from '@solana/spl-token';\r\nimport { UnityContext } from \"react-unity-webgl\";\r\nimport axios from \"axios\";\r\n\r\nexport async function getNftsForOwner(ownerAddress: anchor.web3.PublicKey) {\r\n\tconst allTokens: any = []\r\n\tconst tokenAccounts = await CONNECTION.getParsedTokenAccountsByOwner(ownerAddress, {\r\n\t  programId: TOKEN_PROGRAM_ID\r\n\t});\r\n\r\n\tfor (let index = 0; index < tokenAccounts.value.length; index++) {\r\n\t  const tokenAccount = tokenAccounts.value[index];\r\n\t  const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\r\n\r\n    console.log(tokenAccount.account.data.parsed.info);\r\n      \r\n\t  if (tokenAmount.amount == \"1\" && tokenAmount.decimals == \"0\") {\r\n\t\ttry {\r\n            let [pda] = await anchor.web3.PublicKey.findProgramAddress([\r\n                Buffer.from(\"metadata\"),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                (new anchor.web3.PublicKey(tokenAccount.account.data.parsed.info.mint)).toBuffer(),\r\n              ], TOKEN_METADATA_PROGRAM_ID);\r\n              const accountInfo: any = await CONNECTION.getParsedAccountInfo(pda);\r\n        \r\n              const metadata: any = new Metadata(ownerAddress.toString(), accountInfo.value);\r\n              const { data }: any = await axios.get(metadata.data.data.uri)\r\n      \r\n              if(data.collection.family != \"CyberGothica\") continue;\r\n\r\n\t\t\t  allTokens.push({ Address: tokenAccount.account.data.parsed.info.mint, Name: data.name, ImageUrl: data.image, Image: null })\r\n        }\r\n        catch (error: any) {\r\n            console.log(error.toString());\r\n        }\r\n\t  }\r\n\t  allTokens.sort(function (a: any, b: any) {\r\n\t\tif (a.name < b.name) { return -1; }\r\n\t\tif (a.name > b.name) { return 1; }\r\n\t\treturn 0;\r\n\t  })\r\n\t}\r\n  \r\n\treturn allTokens\r\n  }\r\n\r\n  export async function transferNftsToGame(unityContext: UnityContext, ownerAddress: anchor.web3.PublicKey) {\r\n\tconst tokenAccounts = await CONNECTION.getParsedTokenAccountsByOwner(ownerAddress, {\r\n\t  programId: TOKEN_PROGRAM_ID\r\n\t});\r\n\r\n\tfor (let index = 0; index < tokenAccounts.value.length; index++) {\r\n\t  const tokenAccount = tokenAccounts.value[index];\r\n\t  const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\r\n\r\n    console.log(tokenAccount.account.data.parsed.info);\r\n      \r\n\t  if (tokenAmount.amount == \"1\" && tokenAmount.decimals == \"0\") {\r\n\t\ttry {\r\n            let [pda] = await anchor.web3.PublicKey.findProgramAddress([\r\n                Buffer.from(\"metadata\"),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                (new anchor.web3.PublicKey(tokenAccount.account.data.parsed.info.mint)).toBuffer(),\r\n              ], TOKEN_METADATA_PROGRAM_ID);\r\n              const accountInfo: any = await CONNECTION.getParsedAccountInfo(pda);\r\n        \r\n              const metadata: any = new Metadata(ownerAddress.toString(), accountInfo.value);\r\n              const { data }: any = await axios.get(metadata.data.data.uri)\r\n      \r\n              if(data.collection.family != \"CyberGothica\") continue;\r\n\t\t\t  const nftJsonData = JSON.stringify({ Address: tokenAccount.account.data.parsed.info.mint, Name: data.name, ImageUrl: data.image, Image: null });\r\n          \t  unityContext.send(\"UserWallet\", \"ReceiveNft\", nftJsonData);\r\n        }\r\n        catch (error: any) {\r\n            console.log(error.toString());\r\n        }\r\n\t  }\r\n\t}\r\n  }\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nexport const NETWORK = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nexport const CONNECTION = new anchor.web3.Connection(process.env.REACT_APP_SOLANA_RPC_HOST!);\r\nexport const TREASURY = new anchor.web3.PublicKey(process.env.REACT_APP_TREASURY_ADDRESS!);\r\nexport const SPIRIT_TOKEN_ADDRESS = new anchor.web3.PublicKey(\"9bPoFPCwGCVGDMC5gvzisPdjgKC6tRLRDhirJvcktgVh\");\r\nexport const TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');","import { CONNECTION } from \"./config\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\nexport const getTokenBalance = async (wallet: PublicKey, address: PublicKey) => {\r\n    const response: any = await CONNECTION.getParsedTokenAccountsByOwner(wallet, \r\n        {mint: address}    \r\n    );\r\n\r\n    if(!response || response === undefined) return 0;\r\n    if(!response.value || response.value === undefined || response.value.length === 0) return 0;\r\n    if(!response.value[0] || response.value[0] === undefined) return 0;\r\n    if(!response.value[0].account || response.value[0].account === undefined) return 0;\r\n\r\n    return response.value[0].account.data.parsed.info.tokenAmount.uiAmount;\r\n}","import React, { DOMElement, useEffect, useState } from \"react\";\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport {\r\n\tgetPhantomWallet,\r\n\tgetSlopeWallet,\r\n\tgetSolflareWallet,\r\n\tgetSolletWallet\r\n} from \"@solana/wallet-adapter-wallets\";\r\nimport { getNftsForOwner, transferNftsToGame } from \"./lib/solana/nft-utils\";\r\nimport { getTokenBalance } from \"./lib/solana/utils\";\r\nimport { SPIRIT_TOKEN_ADDRESS } from \"./lib/solana/config\";\r\n\r\nconst unityContext = new UnityContext({\r\n  loaderUrl: \"Build/cg-build.loader.js\",\r\n  dataUrl: \"Build/cg-build.data\",\r\n  frameworkUrl: \"Build/cg-build.framework.js\",\r\n  codeUrl: \"Build/cg-build.wasm\",\r\n  webglContextAttributes: {\r\n    preserveDrawingBuffer: true,\r\n  },\r\n});\r\n\r\nexport const App = () => {\r\n  \r\n  const [displayWallets, setdisplayWallets] = useState(false);\r\n  let userWallet: any;\r\n\r\n  useEffect(function () {\r\n    unityContext.on(\"ConnectWallet\", async function () {\r\n      setdisplayWallets(true);\r\n    });\r\n    \r\n    unityContext.on(\"progress\", function (progression) {\r\n      const loadingPanel = document.getElementById(\"#unity-loading-bar\");\r\n      const progressBarFull = document.getElementById(\"#unity-progress-bar-full\");\r\n      \r\n      if(loadingPanel !== null && progressBarFull !== null) {\r\n        loadingPanel.style.display = \"block\";  \r\n        progressBarFull.style.width = 100 * progression + \"%\";\r\n\r\n        if(progression >= 1) {\r\n          loadingPanel.style.display = \"none\";\r\n        }\r\n      } \r\n    });\r\n\r\n    unityContext.on(\"RegisterNewNft\", function (nftAddress, nftName) {\r\n        console.log(nftAddress);\r\n        console.log(nftName);\r\n        var url = process.env.REACT_APP_LEADERBOARD_DB_URI;\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", url + \"/register\");\r\n\r\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n        xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === 4) {\r\n            console.log(xhr.status);\r\n            console.log(xhr.responseText);\r\n        }};\r\n\r\n        var data = `{\"token_address\": \"${nftAddress}\", \"character_name\": \"${nftName}\"}`;\r\n\r\n        xhr.send(data);\r\n    });\r\n\r\n    return function () {\r\n      unityContext.removeEventListener(\"progress\");\r\n    };\r\n\r\n  }, []);\r\n\r\n  const connectWalletToBuild = async (wallet: any) => {\r\n    if(wallet == null || wallet == undefined) {\r\n      console.log(\"Wallet not found!\");\r\n      return;\r\n    }\r\n\r\n    const adapter = wallet.adapter();\r\n    await adapter.connect();\r\n    userWallet = adapter;\r\n\r\n    if(userWallet.publicKey !== null) {\r\n        unityContext.send(\"UserWallet\", \"ReceiveWalletInfo\", userWallet.publicKey.toString());\r\n        const spiritTokenAmount = await getTokenBalance(userWallet.publicKey, SPIRIT_TOKEN_ADDRESS); \r\n        \r\n        unityContext.send(\"UserWallet\", \"SetSpiritAmount\", spiritTokenAmount);\r\n        setdisplayWallets(false);\r\n\r\n        transferNftsToGame(unityContext, userWallet.publicKey);\r\n        // const nftsData = await getNftsForOwner(userWallet.publicKey);\r\n\r\n        // for(let i = 0; i < nftsData.length; i++) {\r\n        //   const nftJsonData = JSON.stringify(nftsData[i]);\r\n        //   unityContext.send(\"UserWallet\", \"ReceiveNft\", nftJsonData);\r\n        // }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { displayWallets ? \r\n        <div id=\"wallet-connector\">\r\n          <div id=\"wallet-adapters-holder\">\r\n            <div id=\"wallet-adapters-title\">SELECT WALLET</div>\r\n            <div id=\"wallet-adapters-list\">\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getPhantomWallet())}>\r\n                  Phantom\r\n              </button>\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getSlopeWallet())}>\r\n                  Slope\r\n              </button>\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getSolflareWallet())}>\r\n                  Solflare\r\n              </button>\r\n              <button className=\"wallet-adapters-list-button\" onClick={() => connectWalletToBuild(getSolletWallet())}>\r\n                  Sollet\r\n              </button>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      : null }\r\n      <Unity devicePixelRatio={1} unityContext={unityContext} className=\"unity-canvas\" />\r\n      <div id=\"unity-loading-bar\">\r\n        <img id=\"game-logo\" src=\"logo.png\" />\r\n        <div id=\"unity-progress-bar-empty\">\r\n          <div id=\"unity-progress-bar-full\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import { StrictMode } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <StrictMode>\r\n        <App />\r\n    </StrictMode>,\r\n    document.getElementById('unity-container'),\r\n);\r\n"],"sourceRoot":""}